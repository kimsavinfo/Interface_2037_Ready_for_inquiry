{
  "name": "noder.io",
  "version": "1.2.0",
  "description": "A lightweight IoC container to build the core of a scalable and modular API (inspired by Angular and Pimple). No dependencies, works on Node.js and in the browser (only 2kb minified gzipped).",
  "main": "src/index.js",
  "keywords": [
    "ioc",
    "collection",
    "noder",
    "toolkit",
    "framework",
    "lib",
    "node",
    "plugin"
  ],
  "author": {
    "name": "Nicolas Tallefourtane",
    "url": "http://nicolab.net"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/noder-io/noder.io/blob/master/LICENSE"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git@github.com:noder-io/noder.io.git"
  },
  "scripts": {
    "test": "mocha test"
  },
  "devDependencies": {
    "mocha": "^2.0.1",
    "unit.js": ">= 1.0.0 < 2.0.0"
  },
  "readme": "# Noder.io\n\n[![Actual version published on NPM](https://badge.fury.io/js/noder.io.png)](https://www.npmjs.org/package/noder.io)\n[![npm module downloads per month](http://img.shields.io/npm/dm/noder.io.svg)](https://www.npmjs.org/package/noder.io)\n\n\nNoder.io provides a lightweight and flexible core to create a scalable API of a lib, a module, an application or a framework. Noder.io is inspired (among others) by _Angular_ and _Pimple_.\n\nIt is useful for __starting a project quickly__ with a __modular API__ ready to use.\n\nNoder.io (and any object built on top of Noder.io) integrates:\n\n  * [dependency injection](http://noder.io/guide/dependency-injection.html)\n  * [constructors of services, factories and providers](http://noder.io/guide/services.html)\n  * [lazy loading](http://noder.io/guide/lazy-loading.html)\n  * [plugins system easy to use](http://noder.io/guide/plugins.html)\n\nNo dependencies, works on __Node.js__ and in the __browser__ (only 7kb minified - 2kb gzipped).\n\n\n## Quick start\n\nSee [quickstart](http://noder.io/guide/quickstart.html).\n\n\n## Usage\n\nGet common instance of `Noder`:\n\n```js\nvar noder = require('noder.io');\n```\n\nBest practice, create an instance of `Noder` class for your project:\n\n```js\n// ./api/index.js\nvar Noder = require('noder.io').Noder;\nvar api   = new Noder();\n\n// code body that constructs your API\n\nmodule.exports = api;\n```\n\nor shortcut:\n\n```js\n// ./api/index.js\nmodule.exports = require('noder.io').createNoder();\n```\n\nUse your API in another file:\n\n```js\nvar api = require('./api');\n\n// load a plugin\napi.use('pluginName');\n\n// create an item in the container\napi.$di.set('someItem', 'value of the item');\n\n// ...\n```\n\n\n### Collection\n\nNoder.io provides a class to handle a collection of items.\n\n```js\n// create a collection\nvar items = noder.createCollection();\n\nitems.set('keyName', 'key value');\n\n// keyName value\nconsole.log(items.get('keyName'));\n\n// get all items\nvar all = items.getAll();\n\n// true\nconsole.log(items instanceof noder.Collection);\n```\n\nSee [collection](http://noder.io/guide/collection.html).\n\n\n### Dependency Injection\n\nSee [dependency injection](http://noder.io/guide/dependency-injection.html).\n\n\n### Lazy loading\n\n`noder.$require` method provides a lazy `require()`:\n\n```js\n// define the property without loading the mongoose module\nnoder.$require('mongoose');\n\n// false\nconsole.log(noder.$require.isLoaded('mongoose'));\n\n// lazy loading\nvar mongoose = noder.mongoose;\n\n// true\nconsole.log(noder.$require.isLoaded('mongoose'));\n\n// true\nconsole.log(noder.mongoose === require('mongoose'));\n```\n\nAliases:\n\n```js\nnoder.$require('promise', 'bluebird');\n\n// true\nconsole.log(noder.promise === require('bluebird'));\n```\n\nCustom loader:\n\n```js\n// factory: promisify the \"fs\" module\nnoder.$require('fs', function() {\n  return noder.promise.promisifyAll(require('fs'));\n});\n\nfs.readFileAsync('./any-file.js')\n  .then(function(contents) {\n    console.log(contents);\n  })\n  .catch(function(err) {\n    console.error(err);\n  })\n;\n```\n\nSee [lazy loading](http://noder.io/guide/lazy-loading.html).\n\n\n### Plugins\n\nNoder.io provides a plugin system to make a package works as a plugin for Noder.io and also as a standalone module or library.\n\nExample of a Noder plugin:\n\n```js\n/**\n * Initialization for use as a standalone module.\n * @return {Noder} New `Noder` instance\n */\nmodule.exports = function blog() {\n\n  var Noder = require('noder.io').Noder;\n  var noder = new Noder();\n\n  // or use the shortcut:\n  // var noder = require('noder.io').createNoder();\n\n  return module.exports.__noder(noder);\n};\n\n/**\n * Init `blog` plugin.\n * @param  {Noder} noder  `Noder` instance\n * @return {Noder}        Current `Noder` instance\n */\nmodule.exports.__noder = function blogPlugin(noder) {\n\n  // create config object only if not exists\n  noder.$di.addOnce('config', {}, true);\n\n  // sub-modules of blogPlugin\n  // that add features to the instance of Noder\n  noder.use(require('./api/article'));\n  noder.use(require('./api/comment'));\n  noder.use(require('./api/admin'));\n\n  // Always return the instance of Noder to allow chaining\n  return noder;\n};\n```\n\nSee [plugins](http://noder.io/guide/plugins.html).\n\n\n## Unit Tests\n\nNoder.io [is fully tested](https://github.com/noder-io/noder.io/tree/master/test/src) with [Unit.js](http://unitjs.com) and Mocha.\n\n\n## License\n\n[MIT](https://github.com/noder-io/noder.io/blob/master/LICENSE) (c) 2013, Nicolas Tallefourtane.\n\n\n## Author\n\n| [![Nicolas Tallefourtane - Nicolab.net](http://www.gravatar.com/avatar/d7dd0f4769f3aa48a3ecb308f0b457fc?s=64)](http://nicolab.net) |\n|---|\n| [Nicolas Talle](http://nicolab.net) |\n| [![Make a donation via Paypal](https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=PGRH4ZXP36GUC) |\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/noder-io/noder.io/issues"
  },
  "homepage": "https://github.com/noder-io/noder.io",
  "_id": "noder.io@1.2.0",
  "_shasum": "ad2bc6c6c3f9465891edbc6dbf5e84dcae2fa9e6",
  "_from": "noder.io@>= 1.0.0 < 2.0.0",
  "_resolved": "https://registry.npmjs.org/noder.io/-/noder.io-1.2.0.tgz"
}
