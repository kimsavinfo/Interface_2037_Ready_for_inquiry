{
  "name": "must",
  "version": "0.12.0",
  "description": "Testing and assertion library with friendly BDD syntax — awesome.must.be.true(). Many expressive matchers and is test runner and framework agnostic. Follows RFC 2119 with its use of MUST. Good and well tested stuff.",
  "keywords": [
    "assert",
    "assertion",
    "bdd",
    "test",
    "testing",
    "rfc2119"
  ],
  "homepage": "https://github.com/moll/js-must",
  "bugs": {
    "url": "https://github.com/moll/js-must/issues"
  },
  "author": {
    "name": "Andri Möll",
    "email": "andri@dot.ee",
    "url": "http://themoll.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/moll/js-must.git"
  },
  "licenses": [
    {
      "type": "LAGPL",
      "url": "https://github.com/moll/js-must/blob/master/LICENSE"
    }
  ],
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "dependencies": {
    "kindof": ">= 1.0.0 < 2"
  },
  "devDependencies": {
    "mocha": ">= 1.12.0 < 2"
  },
  "readme": "Must.js\n=======\n[![NPM version][npm-badge]](http://badge.fury.io/js/must)\n[![Build status][travis-badge]](https://travis-ci.org/moll/js-must)\n[npm-badge]: https://badge.fury.io/js/must.png\n[travis-badge]: https://travis-ci.org/moll/js-must.png?branch=master\n\nMust.js is a testing and assertion library for JavaScript and Node.js with\na friendly **BDD** syntax (`awesome.must.be.true()`). It ships with **many\nexpressive matchers** and is **test runner and framework agnostic**. Follows\n[RFC 2119][rfc2119] with its use of **MUST**. Good and well testsed stuff.\n\nFor those new to testing JavaScript on Node.js, you'll also need a test\nframework (also called a test-runner or a harness) to run your tests. One such\ntool is [Mocha][mocha].\n\n[rfc2119]: https://www.ietf.org/rfc/rfc2119.txt\n[mocha]: http://visionmedia.github.io/mocha\n\n### Tour\n- Assert with a **beautiful and fluent chain** that saves you from wrapping\n  objects manually and reads nicely, too:\n  ```javascript\n  obj.must.be.true()\n  ```\n\n- Supports the **expect flavor** of wrapping as well:\n  ```javascript\n  var demand = require(\"must\")\n  demand(obj).be.string()\n  ```\n\n- **Many expressive matchers** out of the box, including:\n  ```javascript\n  [].must.be.empty()\n  obj.must.have.nonenumerable(\"foo\")\n  (42).must.be.above(13)\n  ```\n\n- **Simple**, because **matchers always behave the same way** and don't depend\n  on any \"special flags\" in the chain. They are also **not interdependent** the\n  way `foo.should.have.property(x).with.lengthOf(5)` would be.\n\n- **Reasonable**, because it asserts only when you call the matcher\n  `[].must.be.empty()` and not when you merely get the property `empty`. See\n  below why [asserting on property access](#asserting-on-property-access) is\n  **dangerous** in other assertion libraries.\n\n- Has an **intelligent and type-safe** recursive [`eql`][Must.prototype.eql]\n  matcher that compares arrays and objects by content and supports value\n  objects.  It's fully type-safe, so instances of *different classes* aren't\n  *eql*, even if their properties are. It also supports **circular and\n  self-referential** objects.\n  ```javascript\n  primesBelowTen.must.eql([2, 3, 5, 7])\n  model.attributes.must.eql({title: \"New\", createdAt: new Date(2000, 1, 1)})\n  ```\n\n[Must.prototype.eql]: https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.eql\n\n- **Human readable error messages** let you know if an object wasn't what you\n  expected.\n\n- Honors [RFC 2119][rfc2119] by using the word **MUST** because your\n  tests assert things, they don't list wishes or prayers, right? Exactly!\n  `Foo.must.equal(42)`, not `foo.pretty.please.equal(42)`.\n\n- Works with any test runner and framework.  \n- Avoids type coercions and mismatches.\n- Well tested — over 750 cases in over 2500 lines of tests. That makes a test to\n  code ratio of 5:1.\n\n### Using Should.js or Chai.js? Switch for safety!\nAmong other things, one reason why [Should.js][should.js] and [Chai.js][chai.js]\ninspired me to write Must.js is that they have a **fundamental design mistake**\nthat makes them both **surprising in a bad way** and **dangerous to use**. [Read\nmore below](#asserting-on-property-access).\n\n\nInstalling\n----------\n**Note**: Must.js will follow the [semantic versioning](http://semver.org/)\nstarting from v1.0.0.\n\n### Installing on Node.js\n```\nnpm install must\n```\n\n### Installing for the browser\nMust.js doesn't yet have a build ready for the browser, but you might be able\nto use [Browserify][browserify] to have it run there till then.\n\n[browserify]: https://github.com/substack/node-browserify\n\n\nUsing\n-----\nTo use the **fluent chain**, just require Must.js and it'll make itself\navailable everywhere:\n```javascript\nrequire(\"must\")\n```\n\nThen just access the `must` property on any object and call matchers on it.\n```javascript\nanswer.must.equal(42)\nnew Date().must.be.an.instanceof(Date)\n```\n\nIf you wish to use the **expect flavor**, assign Must to any name of your\nchoice, e.g:\n```javascript\nvar expect = require(\"must\")\nvar demand = require(\"must\")\n```\n\nAnd call it with the object you wish to assert:\n```javascript\nexpect(answer).to.equal(42)\ndemand(null).be.null()\n```\n\nFor a list of all matchers, please see the [Must.js API Documentation][api].\n[api]: https://github.com/moll/js-must/blob/master/doc/API.md\n\n### Negative asserting or matching the opposite\nTo assert the opposite, just add `not` between the chain:\n```javascript\ntrue.must.not.be.false()\n[].must.not.be.empty()\n```\n\nUse it multiple times to create lots of fun puzzles! :-)\n```javascript\ntrue.must.not.not.be.true()\n```\n\n### Asserting on null and undefined values\nIn almost all cases you can freely call methods on any object in JavaScript.\nExcept for `null` and `undefined`.\n\nMost of the time this won't be a problem, because if you're asserting that\n`something.must.be.true()` and `something` ends up `null`, the test will still\nfail. If, however, you do need to assert its nullness, aliasing Must to `expect`\nor `demand` and wrapping it manually works well:\n```javascript\nvar demand = require(\"must\")\ndemand(something).be.null()\ndemand(undefined).be.undefined()\n```\n\n### Autoloading\nIf your test runner supports an options file, you might want to require Must\nthere so you wouldn't have to remember to `require` in each test file.\n\nFor [Mocha][mocha], that file is `test/mocha.opts`:\n```\n--require must\n```\n\n### Full example\nInside a test runner or framework things would look something like this:\n```javascript\nrequire(\"must\")\nvar MySong = require(\"../my_song\")\n\ndescribe(\"MySong\", function() {\n  it(\"must be creatable\", function() {\n    new MySong().must.be.an.instanceof(MySong)\n  })\n\n  it(\"must have cowbell\", function() {\n    new MySong().cowbell.must.be.true()\n  })\n\n  it(\"must not have pop\", function() {\n    new MySong().must.not.have.property(\"pop\")\n  })\n})\n```\n\n\nAPI\n---\nFor extended documentation on all matchers and other objects that come with\nMust.js, please see the [Must.js API Documentation][api].\n\n### [Must](https://github.com/moll/js-must/blob/master/doc/API.md#Must)\n- [a](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.a)(class)\n- [above](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.above)(expected)\n- [after](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.after)(expected)\n- [an](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.an)(class)\n- [array](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.array)()\n- [at](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.at)\n- [be](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.be)(expected)\n- [before](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.before)(expected)\n- [below](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.below)(expected)\n- [between](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.between)(begin, end)\n- [boolean](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.boolean)()\n- [contain](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.contain)(expected)\n- [date](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.date)()\n- [empty](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.empty)()\n- [enumerable](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.enumerable)(property)\n- [enumerableProperty](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.enumerableProperty)(property)\n- [eql](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.eql)(expected)\n- [equal](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.equal)(expected)\n- [exist](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.exist)()\n- [false](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.false)()\n- [falsy](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.falsy)()\n- [frozen](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.frozen)()\n- [function](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.function)()\n- [gt](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.gt)(expected)\n- [gte](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.gte)(expected)\n- [have](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.have)\n- [include](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.include)(expected)\n- [instanceOf](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.instanceOf)(class)\n- [instanceof](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.instanceof)(class)\n- [is](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.is)(expected)\n- [keys](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.keys)(keys)\n- [least](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.least)(expected)\n- [length](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.length)(expected)\n- [lt](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.lt)(expected)\n- [lte](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.lte)(expected)\n- [match](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.match)(regexp)\n- [most](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.most)(expected)\n- [nonenumerable](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.nonenumerable)(property)\n- [nonenumerableProperty](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.nonenumerableProperty)(property)\n- [not](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.not)\n- [null](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.null)()\n- [number](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.number)()\n- [object](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.object)()\n- [own](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.own)(property, [value])\n- [ownKeys](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.ownKeys)(keys)\n- [ownProperty](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.ownProperty)(property, [value])\n- [permutationOf](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.permutationOf)(expected)\n- [property](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.property)(property, [value])\n- [regexp](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.regexp)()\n- [string](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.string)()\n- [throw](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.throw)([constructor], [expected])\n- [to](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.to)\n- [true](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.true)()\n- [truthy](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.truthy)()\n- [undefined](https://github.com/moll/js-must/blob/master/doc/API.md#Must.prototype.undefined)()\n\n\nMigrating to Must.js\n--------------------\nYou're likely to be already using some testing library and have a set of tests\nin them. I'm **honored you picked** Must.js to go forward. Let's **get you up to\nspeed** on how Must.js differs from others and how to **migrate your old tests**\nover.\n\n### From Should.js\nMust.js and [Should.js][should.js] are fairly similar when it comes to matchers.\n\n- Just add parentheses after each assertion and you're almost set.\n- Must.js does not have static matchers like `should.not.exist(obj.foo)`.  \n  Convert to `demand(foo).not.to.exist()`.\n- Must.js lacks `with.lengthOf` because its matchers are all independent.  \n  Convert to `obj.must.have.length(5)`\n- Must.js lacks the `ok` matcher because unambiguous names are better.  \n  Convert to `truthy`.\n- Must.js does not support custom error descriptions.\n\nHere's a quick `sed` script to convert `obj.should.xxx` style to\n`obj.must.xxx()`:\n```\nsed -i.should -E -f /dev/stdin test/**/*.js <<-end\n  /\\.should\\.([[:alpha:].]+)([[:space:]}\\);]|$)/s/\\.should\\.([[:alpha:].]+)/.must.\\1()/g\n  s/\\.should\\.([[:alpha:].]+)/.must.\\1/g\nend\n```\n\n### From Chai.js\nMust.js and [Chai.js][chai.js] are fairly similar when it comes to matchers.\n\n- Just add parentheses after each assertion and you're almost set.  \n  That goes for both the BDD (`obj.should`) and *expect*\n  (`expect(obj).to`) flavor.\n- Must.js lacks the `include` flag because its matchers are all independent.  \n  Convert to `Object.keys(obj).must.include(\"foo\")`.\n- Must.js lacks the `deep` flag for the `equal` matcher because\n  [`eql`][Must.prototype.eql] already compares recursively and in a type-safe\n  way.  \n  Convert to `obj.must.eql({some: {deep: \"object\"}})`.\n- Must.js lacks the `deep` flag for the `property` matcher because it prefers\n  regular property access.  \n  Convert to `obj.some.nested.property.must.equal(42)`.\n- Must.js lacks the `ok` matcher because unambiguous names are better.  \n  Convert to `truthy`.\n- Must.js lacks the `respondTo` matcher because unambiguous names are better.  \n  Convert to `MyClass.prototype.must.be.a.function()`.\n\nHere's a quick `sed` script to convert `obj.should.xxx` style to\n`obj.must.xxx()`:\n```\nsed -i.should -E -f /dev/stdin test/**/*.js <<-end\n  /\\.should\\.([[:alpha:].]+)([[:space:]}\\);]|$)/s/\\.should\\.([[:alpha:].]+)/.must.\\1()/g\n  s/\\.should\\.([[:alpha:].]+)/.must.\\1/g\nend\n```\n\n### Convert test case titles to MUST\nIf you've used the `should` style before, you most likely have test cases titled\n`it(\"should do good\")`.  \nMigrate those to `it(\"must do good\")` with this `sed` script:\n```\nsed -i.should -E -e 's/it\\(\"should/it(\"must/g' test/**/*.js\n```\n\n<a name=\"asserting-on-property-access\" />\n### Beware of libraries that assert on property access\nAmong other things, one reason why [Should.js][should.js] and\n[Chai.js][chai.js] inspired me to write Must.js is that they have\na **fundamental design mistake** that makes them both **surprising in a bad\nway** and **dangerous to use**.\n\nIt has to do with them asserting on property access, like this:\n```javascript\ntrue.should.be.true\n[].should.be.empty\n```\n\nWhat initially may seem familiar to Ruby programmers, first of all, is out of\nplace in JavaScript. Dot-something stands for getting a property's value and\ngetters, regardless of language, **should not** have **side-effects**.\nEspecially not **control-flow changing exceptions**!\n\nSecondly, and this is where it's flat out **dangerous asserting on property\naccess**, is that accessing a non-existent property does **nothing** in\nJavaScript.  Recall that JavaScript does not have Ruby's `method_missing` or\nother hooks to catch such access. So, guess what happens when someone mistypes\nor mis-remembers a matcher? Yep, nothin' again. And that's the way it's supposed\nto be.  But what's good in JavaScript, **not so good** for your now **false\npositive test**.\n\nImagine using a plugin that adds matchers for spies or mocks. Then using it with\n`someFn.should.have.been.calledOnce`.  Someone accidentally removes the plugin\nor thinks `calledQuadrice` sounds good?  Well, those assertions will surely\ncontinue passing because they'll now just get `undefined` back.\n\nMust.js **solves both problems** with the **simplest but effective solution**\n— requires you to **always call matchers** because they're plain-old functions\n— `expect(problem).to.not.exist()`.\n\n[should.js]: https://github.com/visionmedia/should.js\n[chai.js]: http://chaijs.com \n\n\nLicense\n-------\nMust.js is released under a *Lesser GNU Affero General Public License*, which in\nsummary means:\n\n- You **can** use this program for **no cost**.\n- You **can** use this program for **both personal and commercial reasons**.\n- You **do not have to share your own program's code** which uses this program.\n- You **have to share modifications** (e.g bug-fixes) you've made to this\n  program.\n\nFor more convoluted language, see the `LICENSE` file.\n\n\nAbout\n-----\n**[Andri Möll](http://themoll.com)** typed this and the code.  \n[Monday Calendar](https://mondayapp.com) supported the engineering work.\n\nIf you find Must.js needs improving, please don't hesitate to type to me now at\n[andri@dot.ee][email] or [create an issue online][issues].\n\n[email]: mailto:andri@dot.ee\n[issues]: https://github.com/moll/js-must/issues\n",
  "readmeFilename": "README.md",
  "_id": "must@0.12.0",
  "_shasum": "5741e729bedbc8b0fe2bc8c5006459415383d05d",
  "_from": "must@^0.12.0",
  "_resolved": "https://registry.npmjs.org/must/-/must-0.12.0.tgz"
}
